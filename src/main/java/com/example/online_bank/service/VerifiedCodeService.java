package com.example.online_bank.service;import com.example.online_bank.domain.entity.User;import com.example.online_bank.domain.entity.VerifiedCode;import com.example.online_bank.enums.VerifiedCodeType;import com.example.online_bank.repository.VerifiedCodeRepository;import com.example.online_bank.util.CodeGeneratorUtil;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.UUID;import static java.lang.Boolean.FALSE;import static java.lang.Boolean.TRUE;@Service@RequiredArgsConstructorpublic class VerifiedCodeService {    private final VerifiedCodeRepository verifiedCodeRepository;    public void createAndSave(String verifiedCode, User user, LocalDateTime expirationDate, VerifiedCodeType type) {        save(createVerifiedCode(verifiedCode, user, expirationDate, type));    }    public void save(VerifiedCode verifiedCode) {        verifiedCodeRepository.save(verifiedCode);    }    public VerifiedCode createVerifiedCode(String verifiedCode, User user, LocalDateTime expirationDate, VerifiedCodeType type) {        cleanOldCodes(user.getId());        return VerifiedCode.builder()                .id(UUID.randomUUID())                .expiresAt(expirationDate)                .verifiedCode(verifiedCode)                .user(user)                .isVerified(FALSE)                .codeType(type)                .build();    }    public String generateVerifiedCode() {        return CodeGeneratorUtil.generatePinCode();    }    public LocalDateTime createExpirationDate(int seconds) {        return LocalDateTime.now().plusSeconds(seconds);    }    public void clearOldCodes() {        List<VerifiedCode> oldCodes = verifiedCodeRepository.findAllByExpiresAtBefore(LocalDateTime.now());        verifiedCodeRepository.deleteAll(oldCodes);    }    public void cleanVerifiedCodes(Long userId) {        verifiedCodeRepository.deleteAllByIsVerifiedTrueAndUser_id(userId);    }    private void cleanOldCodes(Long userId) {        LocalDateTime now = LocalDateTime.now();        List<VerifiedCode> oldUserCodes = verifiedCodeRepository.findAllByExpiresAtBeforeAndUser_Id(now, userId);        verifiedCodeRepository.deleteAll(oldUserCodes);    }    /**     * Возвращает true после того как код для верификации был найден     * производит изменения в репозитории     * если код не был найден - вернет false     */    public boolean validateCode(User user, String code, VerifiedCodeType type) {        LocalDateTime now = LocalDateTime.now();        return verifiedCodeRepository                .findByVerifiedCodeAndUser_IdAndCodeTypeAndIsVerifiedIsFalseAndExpiresAtAfter(code, user.getId(), type, now)                .map(verifiedCode -> {                    verifiedCode.setIsVerified(TRUE);                    verifiedCodeRepository.save(verifiedCode);                    return true;                })                .orElse(false);    }}