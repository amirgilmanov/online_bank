package com.example.online_bank.security.token;import com.example.online_bank.security.jwt.service.JwtService;import org.springframework.security.authentication.AbstractAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import java.util.Collection;import java.util.List;public class JwtAuthorizationToken extends AbstractAuthenticationToken {    private String token;    private JwtService jwtService;    /**     * Конструктор для пользователя, который еще не был аутентифицирован     */    public JwtAuthorizationToken(JwtService jwtService, String token) {        super(null);        setAuthenticated(false);        this.jwtService = jwtService;        this.token = token;    }    public JwtAuthorizationToken(Collection<? extends GrantedAuthority> authorities) {        super(authorities);        setAuthenticated(true);    }    /**     * @return     */    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        jwtService.getAuthorities()    }    /**     * @return     */    @Override    public Object getCredentials() {        return null;    }    /**     * @return     */    @Override    public Object getDetails() {        return null;    }    /**     * @return     */    @Override    public Object getPrincipal() {        return null;    }    /**     * @return     */    @Override    public boolean isAuthenticated() {        return false;    }    /**     * @param isAuthenticated <code>true</code> if the token should be trusted (which may     *                        result in an exception) or <code>false</code> if the token should not be trusted     * @throws IllegalArgumentException     */    @Override    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {    }}