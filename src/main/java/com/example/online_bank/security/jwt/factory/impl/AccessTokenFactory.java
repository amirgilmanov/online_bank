package com.example.online_bank.security.jwt.factory.impl;import com.example.online_bank.config.JwtConfig;import com.example.online_bank.enums.TokenType;import com.example.online_bank.security.jwt.factory.TokenFactory;import com.example.online_bank.security.jwt.service.SpringAuthenticationService;import com.example.online_bank.security.jwt.service.impl.JwtServiceImpl;import io.jsonwebtoken.Jwts;import lombok.RequiredArgsConstructor;import org.springframework.security.core.Authentication;import java.util.Date;import java.util.List;import java.util.Map;import static com.example.online_bank.enums.TokenType.ACCESS;@RequiredArgsConstructorpublic class AccessTokenFactory implements TokenFactory {    private final JwtConfig config;    private final JwtServiceImpl jwtService;    private final SpringAuthenticationService springAuthenticationService;    private static final String CLAIM_ROLE_NAME_VALUE = "roles";    private static final String TOKEN_TYPE_KEY = ACCESS.getValue();    /**     * Создает access токен.     * Проверяет тип токена.     * Создает даты     */    @Override    public String createToken(TokenType type, Authentication auth) {        if (!supports(type)) {            throw new IllegalArgumentException("Unsupported token type: " + type);        }        Date issuedDate = new Date();        Date expiredDate = new Date(issuedDate.getTime() + config.getTokenLifetime().toMillis());        Date notBeforeDate = new Date(issuedDate.getTime() + config.getNotBeforeTime().toMillis());        Map<String, Object> authentificationDetails = springAuthenticationService.getDetails(auth);        String subject =  springAuthenticationService.getName(authentificationDetails);        String userUuid = springAuthenticationService.getUserUuid(authentificationDetails);        String id = jwtService.createId();        List<String> userRoles = jwtService.getAuthorities(auth);        Map<String, Object> claims = jwtService.createClaims();        claims.put(CLAIM_ROLE_NAME_VALUE, userRoles);        claims.put(TOKEN_TYPE_KEY, type);        claims.put("user_uuid", userUuid);        return Jwts.builder()                .expiration(expiredDate)                .signWith(config.getKey())                .claims(claims)                .issuedAt(issuedDate)                .subject(subject)                .notBefore(notBeforeDate)                .id(id)                .audience().add(config.getAudience())                .and()                .issuer(config.getIssuer())                .compact();    }    /**     * @param supported     * @return     */    @Override    public boolean supports(TokenType supported) {        return supported.equals(ACCESS);    }}