package com.example.online_bank.security.provider;import com.example.online_bank.security.jwt.service.JwtService;import com.example.online_bank.security.jwt.service.impl.JwtServiceImpl;import com.example.online_bank.security.token.JwtRequestToken;import io.jsonwebtoken.Claims;import io.jsonwebtoken.ExpiredJwtException;import io.jsonwebtoken.security.SignatureException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.stereotype.Component;import java.util.HashMap;import java.util.Map;@Component@RequiredArgsConstructor@Slf4jpublic class JwtRequestProvider implements AuthenticationProvider {    private final JwtServiceImpl jwtService;    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        // Получаем информацию о пользователе.        // Проверяем пользователя.        //Библиотека jjwt проверяет подпись, дату истечения        JwtRequestToken jwtRequestToken = (JwtRequestToken) authentication;        String token = (String) jwtRequestToken.getPrincipal();        try {            Claims claims = jwtService.getPayload(token);            String userUuid = claims.get("user_uuid").toString();            Map<String, Object> details = new HashMap<>();            details.put("uuid", userUuid);            jwtRequestToken.setDetails(details);        } catch (SignatureException e) {            log.warn("Время жизни токена вышло");        } catch (ExpiredJwtException e) {            log.warn("Токен устарел");        } //TODO: проверку nbf        return jwtRequestToken;    }    /**     * @param authentication     * @return     */    @Override    public boolean supports(Class<?> authentication) {        return JwtRequestProvider.class.isAssignableFrom(authentication);    }}