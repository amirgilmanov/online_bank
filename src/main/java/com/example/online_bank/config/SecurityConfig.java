package com.example.online_bank.config;import com.example.online_bank.security.provider.EmailAuthenticationProvider;import com.example.online_bank.security.filter.EmailAuthenticationFilter;import com.example.online_bank.security.filter.JwtAuthorizationFilter;import com.example.online_bank.service.UserService;import com.example.online_bank.service.VerifiedCodeService;import com.example.online_bank.security.jwt.service.impl.JwtUtilImpl;import lombok.RequiredArgsConstructor;import org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.HttpStatusEntryPoint;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;import static org.springframework.http.HttpStatus.UNAUTHORIZED;import static org.springframework.security.config.http.SessionCreationPolicy.STATELESS;@Configuration@EnableWebSecurity@EnableMethodSecurity(securedEnabled = true)@RequiredArgsConstructorpublic class SecurityConfig extends SecurityFilterAutoConfiguration {    private final EmailAuthenticationFilter emailAuthenticationFilter;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http, JwtAuthorizationFilter jwtAuthorizationFilter) throws Exception {        return http                .csrf(AbstractHttpConfigurer::disable)                .cors(AbstractHttpConfigurer::disable)                .authorizeHttpRequests(authRequestManager ->                        authRequestManager.anyRequest().permitAll()                )                .sessionManagement(sessionManagement ->                        sessionManagement.sessionCreationPolicy(STATELESS))                .exceptionHandling(exceptionHandling ->                        exceptionHandling.authenticationEntryPoint(new HttpStatusEntryPoint(UNAUTHORIZED)))                .addFilterAt(emailAuthenticationFilter, BasicAuthenticationFilter.class)                .addFilterBefore(jwtAuthorizationFilter, UsernamePasswordAuthenticationFilter.class)                .build();    }    @Bean    EmailAuthenticationProvider emailAuthenticationProvider(VerifiedCodeService codeService, UserService userService) {       return new EmailAuthenticationProvider(codeService, userService);    }    @Bean    DaoAuthenticationProvider authenticationProvider(PasswordEncoder passwordEncoder, UserService userService) {        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider(passwordEncoder);        daoAuthenticationProvider.setUserDetailsService(userService);        return daoAuthenticationProvider;    }    @Bean    public BCryptPasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {        return configuration.getAuthenticationManager();    }    @Bean    public JwtAuthorizationFilter jwtRequestFilter(JwtUtilImpl jwtUtil) {        return new JwtAuthorizationFilter(jwtUtil);    }}